name: Pedidos CI

on:
  pull_request:
    branches:
      - main
    paths:
      - '**.cs'
      - '**.csproj'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build and Test
        id: test
        run: |
          dotnet restore
          dotnet build --configuration Release
          dotnet test --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=./TestResults/ /p:Exclude="[xunit.*]*"

      - name: Check Code Coverage
        run: |
          coverage=$(awk -F 'sequenceCoverage="' 'NR>2 {split($2, a, "\""); print a[1]; exit}' ./test/LanchoneteDaRua.Ms.Pedidos.Tests/TestResults/coverage.opencover.xml)
          if (( $(echo "$coverage >= 80" | bc -l) )); then
            echo "Code coverage is greater than or equal to 80%."
          else
            echo "Code coverage is less than 80%."
            exit 1
          fi

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Build Docker image
        run: |
          docker build -t ms-lanchonetedarua-pedidos:latest .
        env:
          AWS_DEFAULT_REGION: us-east-1
    
      - name: Push Docker image to ECR
        run: |
          # Login ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 468037464742.dkr.ecr.us-east-1.amazonaws.com
          
          # Image tag
          docker tag ms-lanchonetedarua-pedidos:latest 468037464742.dkr.ecr.us-east-1.amazonaws.com/lanchonetedarua:ms-lanchonetedarua-pedidos-latest
          
          # Publish image to ecr
          docker push 468037464742.dkr.ecr.us-east-1.amazonaws.com/lanchonetedarua:ms-lanchonetedarua-pedidos-latest
        env:
          AWS_DEFAULT_REGION: us-east-1
    

